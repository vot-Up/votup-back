# Generated by Django 4.2.5 on 2023-10-06 14:13

import core.managers
import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunSQL("CREATE EXTENSION IF NOT EXISTS unaccent;"),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cellphone', models.CharField(max_length=64, null=True)),
                ('password', models.CharField(max_length=104)),
                ('name', models.CharField(max_length=256, null=True)),
                ('email', models.CharField(max_length=256, null=True, unique=True)),
                ('last_login', models.DateTimeField(null=True)),
                ('is_superuser', models.BooleanField(default=False, null=True)),
                ('is_staff', models.BooleanField(default=False, null=True)),
                ('avatar', models.ImageField(null=True, upload_to=core.models.upload_to)),
                ('file_name', models.CharField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
                'managed': True,
            },
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=54, unique=True)),
            ],
            options={
                'db_table': 'plate',
            },
        ),
        migrations.CreateModel(
            name='Voting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('date', models.DateTimeField(null=True, verbose_name='Date')),
                ('description', models.CharField(max_length=54, verbose_name='Description')),
            ],
            options={
                'db_table': 'voting',
            },
        ),
        migrations.CreateModel(
            name='VotingUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('plate', models.ForeignKey(db_column='id_plate', on_delete=django.db.models.deletion.DO_NOTHING, to='core.plate')),
                ('user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('voting', models.ForeignKey(db_column='id_voting', on_delete=django.db.models.deletion.DO_NOTHING, to='core.voting')),
            ],
            options={
                'db_table': 'voting_user',
            },
        ),
        migrations.CreateModel(
            name='VotingPlate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('plate', models.ForeignKey(db_column='id_plate', on_delete=django.db.models.deletion.DO_NOTHING, to='core.plate')),
                ('voting', models.ForeignKey(db_column='id_voting', on_delete=django.db.models.deletion.DO_NOTHING, to='core.voting')),
            ],
            options={
                'db_table': 'voting_plate',
                'unique_together': {('voting', 'plate')},
            },
        ),
        migrations.CreateModel(
            name='PlateUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('type', models.CharField(db_column='type', max_length=1, null=True)),
                ('plate', models.ForeignKey(db_column='id_plate', on_delete=django.db.models.deletion.CASCADE, related_name='plate', to='core.plate')),
                ('user', models.ForeignKey(db_column='id_user', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'plate_user',
                'unique_together': {('plate', 'type'), ('user', 'plate')},
            },
        ),
    ]
